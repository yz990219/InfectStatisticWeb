/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.31
 * Generated at: 2020-03-13 17:44:06 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import hw2.*;
import java.util.*;
import java.io.File;

public final class province_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("hw2");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.io.File");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP 只允许 GET、POST 或 HEAD。Jasper 还允许 OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");

	String date = request.getParameter("date");
	String province = request.getParameter("province_value");
	//System.out.println(date);
	//用于测试用的自组命令行，记得注释掉再把commandline_analysis.analysis(commandline_test);
	//改成commandline_analysis.analysis(cmdline);
	ArrayList<String> commandline_test = new ArrayList<String>();
	commandline_test.add("list");
	commandline_test.add("-log");
	commandline_test.add("D:\\InfectStatisticWeb\\MyInfectStatisticWeb\\WebContent\\log\\");
	commandline_test.add("-out");
	commandline_test.add("D:\\InfectStatistic-main\\221701430\\result\\test.txt");
	commandline_test.add("-date");
	commandline_test.add(date);
	CommandLineAnalysis commandline_analysis = new CommandLineAnalysis();
	CommandLine commandline = commandline_analysis.analysis(commandline_test);
	//测试用
	CommandLineRun cmd_run = new CommandLineRun(commandline);

      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<meta http-equiv=\"X-UA-Compatible\" content=\"IE=EDGE\">\r\n");
      out.write("<title>");
      out.print(province);
      out.write("省详细信息</title>\r\n");
      out.write("<script type=\"text/javascript\" src=\"js/jquery.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\" src=\"js/echarts.min.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<h1>你的选择是");
      out.print(province);
      out.write("日期是：");
      out.print(date);
      out.write("</h1>\r\n");
      out.write("\t<div id=\"main\" style=\"width: 1000px; height: 400px; margin-left: 500px;\"></div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\t\t//折线图使用的JavaScript\r\n");
      out.write("\t\t// 基于准备好的dom，初始化echarts实例\r\n");
      out.write("\t\tvar myChart = echarts.init(document.getElementById('main'));\r\n");
      out.write("\t\tvar date = new Array();\r\n");
      out.write("\t\tvar data_ip = new Array();\r\n");
      out.write("\t\tvar data_sp = new Array();\r\n");
      out.write("\t\tvar data_cure = new Array();\r\n");
      out.write("\t\tvar data_dead = new Array();\r\n");
      out.write("\t\t");

			for(int i = 0;i<cmd_run.filename_list.size();i++){
				String file = cmd_run.filename_list.get(i).substring(0, cmd_run.filename_list.get(i).length() - 8);
		
      out.write("\r\n");
      out.write("\t\t\t\tdate[");
      out.print(i );
      out.write("] = \"");
      out.print(file );
      out.write("\";\r\n");
      out.write("\t\t\t\tdata_ip[");
      out.print(i );
      out.write("] = \"");
      out.print(cmd_run.getInfoByDate(file).getProvince(province).ip);
      out.write("\";\r\n");
      out.write("\t\t\t\tdata_sp[");
      out.print(i );
      out.write("] = \"");
      out.print(cmd_run.getInfoByDate(file).getProvince(province).sp);
      out.write("\";\r\n");
      out.write("\t\t\t\tdata_cure[");
      out.print(i );
      out.write("] = \"");
      out.print(cmd_run.getInfoByDate(file).getProvince(province).cure);
      out.write("\";\r\n");
      out.write("\t\t\t\tdata_dead[");
      out.print(i );
      out.write("] = \"");
      out.print(cmd_run.getInfoByDate(file).getProvince(province).dead);
      out.write("\";\r\n");
      out.write("\t\t");

			}
		
      out.write("\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 指定图表的配置项和数据\r\n");
      out.write("\t\tvar option = {\r\n");
      out.write("\t\t\ttitle : {\r\n");
      out.write("\t\t\t\ttext : '第一个 ECharts 实例'\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\ttooltip : {\r\n");
      out.write("\t\t\t\ttrigger: 'axis',\r\n");
      out.write("\t            backgroundColor: '#0D1B42',\r\n");
      out.write("\t        },\r\n");
      out.write("\t\t\tlegend : {\r\n");
      out.write("\t\t\t\tdata : [ '新增确诊', '新增疑似' , '新增治愈', '新增死亡']\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\txAxis : {\r\n");
      out.write("\t\t\t\tdata : date,\r\n");
      out.write("\t\t\t\tname : '日期'\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\tyAxis : {\r\n");
      out.write("\t\t\t\tname : '人数'\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\tseries : [ {\r\n");
      out.write("\t\t\t\tname : '新增确诊',\r\n");
      out.write("\t\t\t\ttype : 'line',\r\n");
      out.write("\t\t\t\tdata : data_ip\r\n");
      out.write("\r\n");
      out.write("\t\t\t}, {\r\n");
      out.write("\t\t\t\tname : '新增疑似',\r\n");
      out.write("\t\t\t\ttype : 'line',\r\n");
      out.write("\t\t\t\tdata : data_sp\r\n");
      out.write("\r\n");
      out.write("\t\t\t}, {\r\n");
      out.write("\t\t\t\tname : '新增治愈',\r\n");
      out.write("\t\t\t\ttype : 'line',\r\n");
      out.write("\t\t\t\tdata : data_cure\r\n");
      out.write("\r\n");
      out.write("\t\t\t}, {\r\n");
      out.write("\t\t\t\tname : '新增死亡',\r\n");
      out.write("\t\t\t\ttype : 'line',\r\n");
      out.write("\t\t\t\tdata : data_dead\r\n");
      out.write("\r\n");
      out.write("\t\t\t} ]\r\n");
      out.write("\t\t};\r\n");
      out.write("\t\t// 使用刚指定的配置项和数据显示图表。\r\n");
      out.write("\t\tmyChart.setOption(option);\r\n");
      out.write("\t</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
